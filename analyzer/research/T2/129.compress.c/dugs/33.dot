digraph decompress {
{
node [shape=box]
ENTRY [label="ENTRY: skip" ]
EXIT [label="EXIT: skip" ]
158 [label="158: skip" ]
161 [label="161: skip" ]
166 [label="166: skip" ]
167 [label="167: skip" ]
170 [label="170: skip" ]
173 [label="173: skip" ]
174 [label="174: return" ]
180 [label="180: skip" ]
184 [label="184: skip" ]
186 [label="186: skip" ]
187 [label="187: skip" ]
191 [label="191: skip" ]
194 [label="194: skip" ]
199 [label="199: skip" ]
203 [label="203: skip" ]
206 [label="206: skip" ]
208 [label="208: skip" ]
210 [label="210: skip" ]
213 [label="213: skip" ]
221 [label="221: skip" ]
226 [label="226: skip" ]
231 [label="231: skip" ]
236 [label="236: skip" ]
237 [label="237: return" ]
268 [label="268: assume(!(!(code>=0L)))" ]
269 [label="269: assume(!(code>=0L))" ]
270 [label="270: assume(!@block_compress)" ]
271 [label="271: assume(@block_compress)" ]
272 [label="272: assume(!(oldcode==-1L))" ]
273 [label="273: assume(oldcode==-1L)" ]
274 [label="274: assume(!(!(code>-1L)))" ]
275 [label="275: assume(!(code>-1L))" ]
276 [label="276: assume(!(code==256L))" ]
277 [label="277: assume(code==256L)" ]
278 [label="278: assume(!@block_compress)" ]
279 [label="279: assume(@block_compress)" ]
280 [label="280: assume(!(!(code>=0L)))" ]
281 [label="281: assume(!(code>=0L))" ]
282 [label="282: assume(!(code==-1L))" ]
283 [label="283: assume(code==-1L)" ]
284 [label="284: assume(!(code>=@free_ent))" ]
285 [label="285: assume(code>=@free_ent)" ]
286 [label="286: assume(!(!(code>=256L)))" ]
287 [label="287: assume(!(code>=256L))" ]
288 [label="288: assume(!(!(((unsigned int )stackp)>((unsigned int )(((char_type *)StartOf(@htab))+(1<<16))))))" ]
289 [label="289: assume(!(((unsigned int )stackp)>((unsigned int )(((char_type *)StartOf(@htab))+(1<<16)))))" ]
290 [label="290: assume(!(code<@maxmaxcode))" ]
291 [label="291: assume(code<@maxmaxcode)" ]
292 [label="292: set(@n_bits,9)" ]
293 [label="293: set(@maxcode,(long )((1<<@n_bits)-1))" ]
294 [label="294: set(code,255L)" ]
295 [label="295: set(@codetab[code],(unsigned short)0)" ]
296 [label="296: set(*(((char_type *)StartOf(@htab))+code),(unsigned char )code)" ]
297 [label="297: set(code,code-1L)" ]
298 [label="298: set(@free_ent,257L)" ]
299 [label="299: set(@free_ent,256L)" ]
300 [label="300: oldcode:= call(@getcode, ())" style=filled color=grey]
301 [label="301: set(finchar,(int )oldcode)" ]
302 [label="302: call(@putbyte((char )finchar))" style=filled color=grey]
303 [label="303: set(stackp,((char_type *)StartOf(@htab))+(1<<16))" ]
304 [label="304: code:= call(@getcode, ())" style=filled color=grey]
305 [label="305: set(code,255L)" ]
306 [label="306: set(@codetab[code],(unsigned short)0)" ]
307 [label="307: set(code,code-1L)" ]
308 [label="308: set(@clear_flg,1)" ]
309 [label="309: set(@free_ent,256L)" ]
310 [label="310: code:= call(@getcode, ())" style=filled color=grey]
311 [label="311: set(incode,code)" ]
312 [label="312: set(tmp,stackp)" ]
313 [label="313: set(stackp,stackp+1)" ]
314 [label="314: set(*tmp,(unsigned char )finchar)" ]
315 [label="315: set(code,oldcode)" ]
316 [label="316: set(tmp___0,stackp)" ]
317 [label="317: set(stackp,stackp+1)" ]
318 [label="318: set(*tmp___0,*(((char_type *)StartOf(@htab))+code))" ]
319 [label="319: set(code,(long )@codetab[code])" ]
320 [label="320: set(tmp___1,stackp)" ]
321 [label="321: set(stackp,stackp+1)" ]
322 [label="322: set(finchar,(int )*(((char_type *)StartOf(@htab))+code))" ]
323 [label="323: set(*tmp___1,(unsigned char )finchar)" ]
324 [label="324: set(stackp,stackp-1)" ]
325 [label="325: call(@putbyte((char )*stackp))" style=filled color=grey]
326 [label="326: set(code,@free_ent)" ]
327 [label="327: set(@codetab[code],(unsigned short )oldcode)" ]
328 [label="328: set(*(((char_type *)StartOf(@htab))+code),(unsigned char )finchar)" ]
329 [label="329: set(@free_ent,code+1L)" ]
330 [label="330: set(oldcode,incode)" ]
331 [label="331: skip" ]
332 [label="332: skip" ]
333 [label="333: skip" ]
334 [label="334: skip" ]
335 [label="335: skip" ]
}
ENTRY -> ENTRY
ENTRY -> EXIT
ENTRY -> 158
ENTRY -> 161
ENTRY -> 166
ENTRY -> 167
ENTRY -> 170
ENTRY -> 173
ENTRY -> 174
ENTRY -> 180
ENTRY -> 184
ENTRY -> 186
ENTRY -> 187
ENTRY -> 191
ENTRY -> 194
ENTRY -> 199
ENTRY -> 203
ENTRY -> 206
ENTRY -> 208
ENTRY -> 210
ENTRY -> 213
ENTRY -> 221
ENTRY -> 226
ENTRY -> 231
ENTRY -> 236
ENTRY -> 237
ENTRY -> 268
ENTRY -> 269
ENTRY -> 270
ENTRY -> 271
ENTRY -> 272
ENTRY -> 273
ENTRY -> 274
ENTRY -> 275
ENTRY -> 276
ENTRY -> 277
ENTRY -> 278
ENTRY -> 279
ENTRY -> 280
ENTRY -> 281
ENTRY -> 282
ENTRY -> 283
ENTRY -> 284
ENTRY -> 285
ENTRY -> 286
ENTRY -> 287
ENTRY -> 288
ENTRY -> 289
ENTRY -> 290
ENTRY -> 291
ENTRY -> 292
ENTRY -> 294
ENTRY -> 295
ENTRY -> 296
ENTRY -> 297
ENTRY -> 298
ENTRY -> 299
ENTRY -> 300
ENTRY -> 301
ENTRY -> 302
ENTRY -> 303
ENTRY -> 304
ENTRY -> 305
ENTRY -> 306
ENTRY -> 307
ENTRY -> 308
ENTRY -> 309
ENTRY -> 310
ENTRY -> 311
ENTRY -> 312
ENTRY -> 313
ENTRY -> 314
ENTRY -> 315
ENTRY -> 316
ENTRY -> 317
ENTRY -> 318
ENTRY -> 319
ENTRY -> 320
ENTRY -> 321
ENTRY -> 322
ENTRY -> 323
ENTRY -> 324
ENTRY -> 325
ENTRY -> 326
ENTRY -> 327
ENTRY -> 328
ENTRY -> 329
ENTRY -> 330
ENTRY -> 331
ENTRY -> 332
ENTRY -> 333
ENTRY -> 334
ENTRY -> 335
EXIT -> EXIT
158 -> EXIT
161 -> EXIT
166 -> EXIT
167 -> EXIT
170 -> EXIT
173 -> EXIT
174 -> EXIT
180 -> EXIT
184 -> EXIT
186 -> EXIT
187 -> EXIT
191 -> EXIT
194 -> EXIT
199 -> EXIT
203 -> EXIT
206 -> EXIT
208 -> EXIT
210 -> EXIT
213 -> EXIT
221 -> EXIT
226 -> EXIT
231 -> EXIT
236 -> EXIT
237 -> EXIT
268 -> 295
268 -> 296
269 -> EXIT
270 -> 278
270 -> 279
271 -> 278
271 -> 279
272 -> 315
272 -> 327
273 -> EXIT
274 -> 276
274 -> 277
275 -> EXIT
276 -> 284
276 -> 285
276 -> 311
277 -> 284
277 -> 285
277 -> 311
278 -> 278
278 -> 279
279 -> 278
279 -> 279
280 -> 306
280 -> 307
281 -> EXIT
282 -> 284
282 -> 285
282 -> 311
283 -> EXIT
284 -> 286
284 -> 287
285 -> EXIT
286 -> 318
286 -> 319
287 -> 322
288 -> 324
289 -> 312
289 -> 313
289 -> 316
289 -> 317
289 -> 320
289 -> 321
289 -> 328
290 -> EXIT
291 -> 327
291 -> 328
292 -> 293
293 -> EXIT
294 -> 268
294 -> 269
295 -> 295
295 -> 306
295 -> 319
295 -> 327
296 -> 297
297 -> 268
297 -> 269
298 -> 284
298 -> 285
299 -> 284
299 -> 285
300 -> 272
300 -> 273
300 -> 301
301 -> 302
301 -> 314
302 -> EXIT
303 -> 312
303 -> 313
303 -> 316
303 -> 317
303 -> 320
303 -> 321
304 -> 274
304 -> 275
305 -> 280
305 -> 281
306 -> 306
306 -> 319
306 -> 327
307 -> 280
307 -> 281
308 -> EXIT
309 -> 284
309 -> 285
310 -> 282
310 -> 283
311 -> 330
312 -> 314
313 -> 316
313 -> 317
313 -> 320
313 -> 321
314 -> EXIT
315 -> 286
315 -> 287
316 -> 318
317 -> 316
317 -> 317
317 -> 320
317 -> 321
318 -> EXIT
319 -> 286
319 -> 287
320 -> 323
321 -> 324
322 -> 314
322 -> 323
322 -> 328
323 -> EXIT
324 -> 288
324 -> 289
324 -> 325
325 -> EXIT
326 -> 290
326 -> 291
327 -> 306
327 -> 319
327 -> 327
328 -> 329
329 -> 284
329 -> 285
330 -> 315
330 -> 327
331 -> EXIT
332 -> EXIT
333 -> EXIT
334 -> EXIT
335 -> EXIT
}
